import random_circuit
import unittest


class TestRandomCircuit(unittest.TestCase):
    def test_generate_two_qubit_gates_in_layers_6(self):
        gates = random_circuit.generate_two_qubit_gates_in_layers(6)

        self.assertEqual(len(gates), 8)
        self.assertEqual(gates[0], [
            ((2, 0), (3, 0)),
            ((0, 1), (1, 1)), ((4, 1), (5, 1)),
            ((2, 2), (3, 2)),
            ((0, 3), (1, 3)), ((4, 3), (5, 3)),
            ((2, 4), (3, 4)),
            ((0, 5), (1, 5)), ((4, 5), (5, 5)),
        ])
        self.assertEqual(gates[1], [
            ((0, 0), (1, 0)), ((4, 0), (5, 0)),
            ((2, 1), (3, 1)),
            ((0, 2), (1, 2)), ((4, 2), (5, 2)),
            ((2, 3), (3, 3)),
            ((0, 4), (1, 4)), ((4, 4), (5, 4)),
            ((2, 5), (3, 5)),
        ])
        self.assertEqual(gates[2], [
            ((1, 1), (1, 2)), ((3, 1), (3, 2)), ((5, 1), (5, 2)),
            ((0, 3), (0, 4)), ((2, 3), (2, 4)), ((4, 3), (4, 4)),
        ])
        self.assertEqual(gates[3], [
            ((0, 1), (0, 2)), ((2, 1), (2, 2)), ((4, 1), (4, 2)),
            ((1, 3), (1, 4)), ((3, 3), (3, 4)), ((5, 3), (5, 4)),
        ])
        self.assertEqual(gates[4], [
            ((3, 0), (4, 0)),
            ((1, 1), (2, 1)),
            ((3, 2), (4, 2)),
            ((1, 3), (2, 3)),
            ((3, 4), (4, 4)),
            ((1, 5), (2, 5)),
        ])
        self.assertEqual(gates[5], [
            ((1, 0), (2, 0)),
            ((3, 1), (4, 1)),
            ((1, 2), (2, 2)),
            ((3, 3), (4, 3)),
            ((1, 4), (2, 4)),
            ((3, 5), (4, 5)),
        ])
        self.assertEqual(gates[6], [
            ((0, 0), (0, 1)), ((2, 0), (2, 1)), ((4, 0), (4, 1)),
            ((1, 2), (1, 3)), ((3, 2), (3, 3)), ((5, 2), (5, 3)),
            ((0, 4), (0, 5)), ((2, 4), (2, 5)), ((4, 4), (4, 5)),
        ])
        self.assertEqual(gates[7], [
            ((1, 0), (1, 1)), ((3, 0), (3, 1)), ((5, 0), (5, 1)),
            ((0, 2), (0, 3)), ((2, 2), (2, 3)), ((4, 2), (4, 3)),
            ((1, 4), (1, 5)), ((3, 4), (3, 5)), ((5, 4), (5, 5)),
        ])

    def test_generate_two_qubit_gates_in_layers_8(self):
        gates = random_circuit.generate_two_qubit_gates_in_layers(8)

        self.assertEqual(len(gates), 8)
        self.assertEqual(gates[0], [
            ((2, 0), (3, 0)), ((6, 0), (7, 0)),
            ((0, 1), (1, 1)), ((4, 1), (5, 1)),
            ((2, 2), (3, 2)), ((6, 2), (7, 2)),
            ((0, 3), (1, 3)), ((4, 3), (5, 3)),
            ((2, 4), (3, 4)), ((6, 4), (7, 4)),
            ((0, 5), (1, 5)), ((4, 5), (5, 5)),
            ((2, 6), (3, 6)), ((6, 6), (7, 6)),
            ((0, 7), (1, 7)), ((4, 7), (5, 7)),
        ])
        self.assertEqual(gates[1], [
            ((0, 0), (1, 0)), ((4, 0), (5, 0)),
            ((2, 1), (3, 1)), ((6, 1), (7, 1)),
            ((0, 2), (1, 2)), ((4, 2), (5, 2)),
            ((2, 3), (3, 3)), ((6, 3), (7, 3)),
            ((0, 4), (1, 4)), ((4, 4), (5, 4)),
            ((2, 5), (3, 5)), ((6, 5), (7, 5)),
            ((0, 6), (1, 6)), ((4, 6), (5, 6)),
            ((2, 7), (3, 7)), ((6, 7), (7, 7)),
        ])
        self.assertEqual(gates[2], [
            ((1, 1), (1, 2)), ((3, 1), (3, 2)), ((5, 1), (5, 2)), ((7, 1), (7, 2)),
            ((1, 5), (1, 6)), ((3, 5), (3, 6)), ((5, 5), (5, 6)), ((7, 5), (7, 6)),
            ((0, 3), (0, 4)), ((2, 3), (2, 4)), ((4, 3), (4, 4)), ((6, 3), (6, 4)),
        ])
        self.assertEqual(gates[3], [
            ((0, 1), (0, 2)), ((2, 1), (2, 2)), ((4, 1), (4, 2)), ((6, 1), (6, 2)),
            ((0, 5), (0, 6)), ((2, 5), (2, 6)), ((4, 5), (4, 6)), ((6, 5), (6, 6)),
            ((1, 3), (1, 4)), ((3, 3), (3, 4)), ((5, 3), (5, 4)), ((7, 3), (7, 4)),
        ])
        self.assertEqual(gates[4], [
            ((3, 0), (4, 0)),
            ((1, 1), (2, 1)), ((5, 1), (6, 1)),
            ((3, 2), (4, 2)),
            ((1, 3), (2, 3)), ((5, 3), (6, 3)),
            ((3, 4), (4, 4)),
            ((1, 5), (2, 5)), ((5, 5), (6, 5)),
            ((3, 6), (4, 6)),
            ((1, 7), (2, 7)), ((5, 7), (6, 7)),
        ])
        self.assertEqual(gates[5], [
            ((1, 0), (2, 0)), ((5, 0), (6, 0)),
            ((3, 1), (4, 1)),
            ((1, 2), (2, 2)), ((5, 2), (6, 2)),
            ((3, 3), (4, 3)),
            ((1, 4), (2, 4)), ((5, 4), (6, 4)),
            ((3, 5), (4, 5)),
            ((1, 6), (2, 6)), ((5, 6), (6, 6)),
            ((3, 7), (4, 7)),
        ])
        self.assertEqual(gates[6], [
            ((0, 0), (0, 1)), ((2, 0), (2, 1)), ((4, 0), (4, 1)), ((6, 0), (6, 1)),
            ((1, 2), (1, 3)), ((3, 2), (3, 3)), ((5, 2), (5, 3)), ((7, 2), (7, 3)),
            ((0, 4), (0, 5)), ((2, 4), (2, 5)), ((4, 4), (4, 5)), ((6, 4), (6, 5)),
            ((1, 6), (1, 7)), ((3, 6), (3, 7)), ((5, 6), (5, 7)), ((7, 6), (7, 7)),
        ])
        self.assertEqual(gates[7], [
            ((1, 0), (1, 1)), ((3, 0), (3, 1)), ((5, 0), (5, 1)), ((7, 0), (7, 1)),
            ((0, 2), (0, 3)), ((2, 2), (2, 3)), ((4, 2), (4, 3)), ((6, 2), (6, 3)),
            ((1, 4), (1, 5)), ((3, 4), (3, 5)), ((5, 4), (5, 5)), ((7, 4), (7, 5)),
            ((0, 6), (0, 7)), ((2, 6), (2, 7)), ((4, 6), (4, 7)), ((6, 6), (6, 7)),
        ])


if __name__ == '__main__':
    unittest.main()
